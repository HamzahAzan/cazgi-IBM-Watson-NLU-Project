{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","this","props","emotions","style","margin","width","listOfEvents","eventDetails","Object","entries","map","emotion","eventListCollection","className","color","border","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","output","JSON","stringify","data","obj","parse","label","fontSize","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5448df50.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n    render() {\r\n\r\n      if (this.props.emotions===\"Bad Request: invalid request: content is empty\") {\r\n        return (  \r\n          <div style={{ margin: \"auto\", width: \"50%\"}}>\r\n             \"Bad Request: invalid request: content is empty\"\r\n            </div>\r\n            );}\r\n            else if (this.props.emotions ===\"Bad Request: Could not fetch URL: Unable to resolve host name\"){\r\n              return (  \r\n                <div style={{ margin: \"auto\", width: \"50%\"}}>\r\n                   \"Bad Request: Could not fetch URL: Unable to resolve host name\"\r\n                  </div>\r\n                  );}\r\n           else{\r\n            \r\n      let listOfEvents = this.props.emotions;\r\n      let listOfEventsAsArray = Object.entries(listOfEvents);\r\n      let eventDetails = listOfEventsAsArray.map((emotion)=>{\r\n        let eventListCollection = Object.entries(emotion[1])\r\n        return <table className=\"table table-bordered\">\r\n          <tbody>\r\n          <tr><td style={{color: \"black\",border: \"1px solid black\"}}>{\"Sadness\"}</td>\r\n          <td style={{color: \"black\",border: \"1px solid black\"}}>{eventListCollection[0][1]}</td>\r\n              </tr> \r\n              <tr>\r\n                <td style={{color: \"black\",border: \"1px solid black\"}}>{\"Joy\"}</td>\r\n                <td style={{color: \"black\",border: \"1px solid black\"}}>{eventListCollection[1][1]}</td>\r\n                </tr> \r\n              <tr><td style={{color: \"black\",border: \"1px solid black\"}}>{\"Fear\"}</td>\r\n              <td style={{color: \"black\",border: \"1px solid black\"}}>{eventListCollection[2][1]}</td>              \r\n              </tr>\r\n              <tr><td style={{color: \"black\",border: \"1px solid black\"}}>{\"Disgust\"}</td>\r\n              <td style={{color: \"black\",border: \"1px solid black\"}}>{eventListCollection[3][1]}</td>\r\n              </tr>\r\n              <tr><td style={{color: \"black\",border: \"1px solid black\"}}>{\"Anger\"}</td>\r\n              <td style={{color: \"black\",border: \"1px solid black\"}}>{eventListCollection[4][1]}</td>\r\n              </tr>\r\n          </tbody>\r\n         \r\n               </table>\r\n               \r\n          \r\n        })\r\n\r\n               return (  \r\n                <div style={{ margin: \"auto\", width: \"50%\"}}>\r\n                    {eventDetails\r\n                    }\r\n                  </div>\r\n                  );\r\n                }\r\n            \r\n     \r\n\r\n          }\r\n}\r\nexport default EmotionTable;\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass App extends React.Component {\r\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n            mode: \"text\",\r\n          sentimentOutput:[],\r\n          sentiment:true\r\n        }\r\n  \r\n  renderTextArea = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"url\") {\r\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"text\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    } \r\n  }\r\n\r\n  renderTextBox = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"text\") {\r\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"url\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    }\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({sentiment:true});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n    ret.then((response)=>{\r\n      let output = JSON.stringify(response.data);\r\n      let obj = JSON.parse(output);\r\n\r\n      if (obj.label ===\"positive\"){\r\n        output =<div style={{color:\"green\",fontSize:20}}>{output}</div>\r\n      }else if (obj.label ===\"negative\"){\r\n        output =<div style={{color:\"red\",fontSize:20}}>{output}</div>\r\n      }else if (obj.label ===\"neutral\"){\r\n        output =<div style={{color:\"yellow\",fontSize:20}}>{output}</div>\r\n      } else {\r\n        output =<div style={{color:\"orange\",fontSize:20}}>{output}</div>\r\n      }\r\n        this.setState({sentimentOutput:output});\r\n      });\r\n    }\r\n  \r\n  sendForEmotionAnalysis = () => {\r\n    this.setState({sentiment:false});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n\r\n    ret.then((response)=>{\r\n  \r\n      this.setState({sentimentOutput:<EmotionTable emotions = {response.data}/>});\r\n  });\r\n}\r\n  \r\n  render() {\r\n\r\n    return (  \r\n      <div className=\"App\">\r\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\r\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\r\n        <br/><br/>\r\n        {this.state.innercomp}\r\n        <br/>\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br/>\r\n            {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}